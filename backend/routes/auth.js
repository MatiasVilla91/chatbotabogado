const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const logger = require('../utils/logger');
const passport = require('passport');
const rateLimit = require('express-rate-limit');
const { body, validationResult } = require('express-validator');

// ‚ùó Limitador de intentos de login
const loginLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 10, // m√°ximo 10 intentos por IP
  message: "Demasiados intentos. Esper√° un rato e intent√° de nuevo.",
});

// ‚ùó Validador para registro (email v√°lido y contrase√±a de m√≠nimo 6 caracteres)
const validateRegister = [
  body('email').isEmail().withMessage('Email inv√°lido'),
  body('password').isLength({ min: 6 }).withMessage('Contrase√±a demasiado corta'),
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ message: "Datos inv√°lidos", errors: errors.array() });
    }
    next();
  }
];

// üîê Registro con email
router.post('/register', validateRegister, async (req, res) => {
  try {
    const { name, email, password } = req.body;
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ message: "El usuario ya existe" });

    const hashedPassword = await bcrypt.hash(password, 10);
    user = new User({ name, email, password: hashedPassword });
    await user.save();
    logger.info(`üÜï Nuevo registro: ${email}`);
    res.status(201).json({ message: "Usuario creado correctamente" });
  } catch (error) {
    logger.error(`‚ùå Registro fallido: ${error.message}`);
    res.status(500).json({ message: "Error en el servidor" });
  }
});

// üîê Login con email
router.post('/login', loginLimiter, async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).json({ message: "Email y contrase√±a requeridos" });

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: "Usuario no encontrado" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Contrase√±a incorrecta" });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '12h' });
    logger.info(`üîì Inicio de sesi√≥n: ${email}`);
    // ‚úÖ MOSTRAR EL TOKEN EN CONSOLA
    console.log(`‚úÖ Login exitoso para ${email}`);
    //console.log(`üîê TOKEN JWT: ${token}`);
    res.json({ token, user: { name: user.name, email: user.email }, message: "Inicio de sesi√≥n exitoso" });
  } catch (error) {
    logger.error(`‚ùå Error al iniciar sesi√≥n: ${error.message}`);
    res.status(500).json({ message: "Error en el servidor" });
  }
});

// üåê INICIAR login con Google
router.get('/google', passport.authenticate('google', {
  scope: ['profile', 'email'],
}));

/// üîÅ CALLBACK de Google (Mejorado y Seguro)
router.get('/google/callback', passport.authenticate('google', {
  failureRedirect: '/login',
  session: true, // ‚úÖ Habilitamos sesi√≥n
}), async (req, res) => {
  try {
    console.log("‚úÖ Callback de Google - Usuario recibido:", req.user);
    
    const user = req.user;
    if (!user) {
      console.error("‚ùå Error: Usuario de Google no encontrado.");
      return res.status(500).send("Error al autenticar con Google");
    }

    // Generar el token JWT solo si el usuario existe
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '12h' });
    
    console.log("‚úÖ Token generado:", token);

    // Verificar URL del frontend
    const frontendUrl = process.env.FRONTEND_URL;
    console.log("‚úÖ URL de redirecci√≥n:", frontendUrl);

    if (!frontendUrl) {
      console.error("‚ùå Error: FRONTEND_URL no est√° configurada.");
      return res.status(500).json({ message: "Error en la configuraci√≥n del frontend" });
    }

    // ‚úÖ Guardamos la sesi√≥n correctamente
    req.login(user, (err) => {
      if (err) {
        console.error("‚ùå Error al iniciar sesi√≥n en la sesi√≥n:", err);
        return res.status(500).send("Error al iniciar sesi√≥n en la sesi√≥n");
      }

      console.log("‚úÖ Sesi√≥n de usuario guardada:", req.session);
      res.redirect(`${frontendUrl}/google-success?token=${token}`);
    });

  } catch (error) {
    console.error("‚ùå Error en el callback de Google:", error);
    res.status(500).send("Error interno del servidor");
  }
});


module.exports = router;
